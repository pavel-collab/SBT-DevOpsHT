pipeline {
    // Есть 2 принципиальных подхода к написанию Jenkins файлов: скриптовый и декларативный.
    // Здесь мы используем более подзний декларативный подход.

    agent any // Использует любого доступного агента

    stages {
        stage('rsyslog install') {
            steps {
                sh 'apt update'
                sh 'apt install -y rsyslog'
                sh 'rm -rf /var/lib/apt/lists/*'
                dir('Lab04') {
                    sh 'cp rsyslog.conf /etc/rsyslog.conf'
                }
                sh 'rsyslogd -n &'
            }
        }

        stage('Check Syslog') {
            steps {
                script {
                    def syslogExists = sh(script: 'test -f /var/log/syslog && echo "Exists" || echo "Does not exist"', returnStdout: true).trim()
                    echo syslogExists
                    if (syslogExists == "Exists") {
                        sh 'cat /var/log/syslog | tail -n 100' // Вывод последних 100 строк
                    } else {
                        echo "Syslog does not exist."
                    }
                }
            }
        }

        // чистим дерикторию перед тем, как загрузить новую версию кода
        stage('Cleanup Workspace') {
            steps {
                script {
                    // Удаляем содержимое рабочего пространства
                    deleteDir()
                }
            }
        }

        stage('GetCodeSource') {
            steps {
                // Клонируем репозиторий
                sh 'git clone https://github.com/pavel-collab/CRC32-check-sum.git'
                // указываем дерикторию для работы
                dir('CRC32-check-sum') {
                    // Инициализируем и обновляем сабмодули
                    sh 'git submodule update --init --recursive'
                }
            }
        }

        stage('Updating system') {
            steps {
                sh 'apt-get update'
            }
        }

        stage('Install Dependencies') {
            steps {
                // установка зависимостей для сборки
                sh 'apt install -y cmake gcc build-essential python3 python3-pip'
                // Установка зависимостей для тестов
                sh 'apt install -y python3-pytest python3-venv'
            }
        }

        stage('Check Tools') {
            steps {
                sh 'cmake --version || (echo "CMake is not installed" && exit 1)'
                sh 'make --version || (echo "Make is not installed" && exit 1)'
                sh 'python3 --version || (echo "Python is not installed" && exit 1)'
            }
        }

        stage("Build Virtual Environment"){
            steps {
                sh '''
                    python3 -m venv venv
                    . venv/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r ./CRC32-check-sum/requirements.txt
                '''
            }
        }
        
        stage('Build Application') {
            steps {
                // сборка C++ приложения
                dir('CRC32-check-sum') {
                    sh 'mkdir build'
                }
                dir('CRC32-check-sum/build') {
                    sh 'cmake ..'
                    sh 'make'
                }
            }
        }
        
        stage('Run Unit Tests') {
            steps {
                sh '''
                . venv/bin/activate
                pytest CRC32-check-sum/tests/simple_tests.py --cov=CRC32-check-sum --cov-report=xml:coverage.xml --junitxml=test-results.xml
                '''
            }

            post {
                always {
                    // Публикация JUnit-отчётов тестов
                    junit 'test-results.xml'

                    // Публикация отчёта покрытия
                    step([$class: 'CoberturaPublisher', coberturaReportFile: 'coverage.xml'])
                }
            }
        }

        stage('Verify Test Coverage') {
            steps {
                script {
                    def coverage = sh(
                        script: '''
                        . venv/bin/activate
                        coverage report --fail-under=50
                        ''',
                        returnStatus: true
                    )

                    // if (coverage != 0) {
                    //     error("Test coverage is below 90%")
                    // }
                }
            }
        }

        stage('Code Analysis') {
            environment {
                scannerHome = tool 'sonar'
            }
            steps {
                script {
                    withSonarQubeEnv('sonar') {
                        sh '''
                        ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=sbt-devops-hw \
                            -Dsonar.projectName="TEST-sonar" \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=CRC32-check-sum/src \
                            -Dsonar.language=c++ \
                            -Dsonar.host.url=http://sonarcube:9000 \
                            -Dsonar.python.coverage.reportPaths=report.html \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                        '''
                    }
                }
            }
        }
    }

    // Секция определяет действия, которые надо произвести после прохождения всех шагов.
    // Секция success отрабатывает, если ВСЕ шаги пайплайна прошли успешно.
    post {
        success {
            echo 'Tests passed!'
        }
        failure {
            echo 'Tests failed!'
        }
    }
}