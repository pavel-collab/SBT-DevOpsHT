#!/usr/bin/env python3

import psycopg2
from flask import Flask, render_template, request, redirect, url_for, jsonify, abort

def get_db_connection():
    conn = psycopg2.connect(
        host='db',
        database='main_db',
        user='postgres',
        password='postgres'
    )
    return conn

def create_table():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute('''
        CREATE TABLE IF NOT EXISTS t1 (
            id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            a INTEGER,
            b INTEGER
        );
    ''')
    conn.commit()
    cur.close()
    conn.close()

app = Flask(__name__)

@app.route('/add_item', methods=['POST'])
def add_item():
   # validate mew records 
    if request.json is None:
        abort(400)

    a = request.json.get('a')
    b = request.json.get('b')
    if a is None or b is None or not isinstance(a, int):
        abort(400)

    # insert new record
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(f"INSERT INTO t1(a, b) VALUES ({a}, {b})")
        conn.commit()
        entry_id = cur.lastrowid
        cur.close()
        conn.close()

    except RuntimeError:
        return jsonify(result='error', error='(a, b) pair must be unique')

    #Report success to client mode
    return jsonify(result='OK', id=entry_id)

@app.route('/')
def main_page():
    create_table()

    conn = get_db_connection()   
    cur = conn.cursor()
    cur.execute('SELECT * FROM t1')
    ret =  render_template('index.html',
                            columns=[x[0] for x in cur.description],
                            data=cur.fetchall())
    
    cur.close()
    conn.close()
    return ret

if __name__ == '__main__':
    app.run('0.0.0.0', port=5010, debug=True)

